/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. RegexParser.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{
  LOOKAHEAD = 2;  static = true;}PARSER_BEGIN(RegexParser)package regexparser;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

import faops.FA;
import stmtparser.Operations;
import gui.FADrawer;
public class RegexParser/*@bgen(jjtree)*/implements RegexParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTRegexParserState jjtree = new JJTRegexParserState();

/*@egen*/  public static void main(String args [])  {
    new RegexParser(System.in);
    while (true)
    {
      try
      {
        System.out.println("Reading from standard input...");
        SimpleNode n = RegexParser.Start();
        System.out.println("Printing...");
        n.dump("");
        System.out.println("\n");
        eval(n);
        RegexParser.ReInit(System.in);
      }
      catch (Exception e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        e.printStackTrace();
        break;
      }
    }
  }
  public static FA eval(SimpleNode node) throws Exception
  {
    FA out = null;
    switch(node.id){
		case RegexParserTreeConstants.JJTOP:
			if(node.isBinary()){
			  	SimpleNode lhs = (SimpleNode) node.jjtGetChild(0);
				SimpleNode rhs = (SimpleNode) node.jjtGetChild(1);
				if(node.op == Operations.Op.UNI){
					FA fa = eval(lhs);
					FA fb = eval(rhs);
					out = faops.FA.quickUnion(fa,fb);
				} else if(node.op == Operations.Op.CAT){
					FA fa = eval(lhs);
					FA fb = eval(rhs);
					out = faops.FA.cat(fa,fb);
				} else throw new Exception("Invalid Op");
			}
			else {
			  SimpleNode arg = (SimpleNode) node.jjtGetChild(0);
			  if(node.op == Operations.Op.STAR){
			    out = faops.FA.star(eval(arg));
			  } else throw new Exception("Invalid Op");
			}
			break;
		case RegexParserTreeConstants.JJTTERMINAL:
			out = FA.fromSymbol(node.symbol);
			break;
		default:
			  	out = eval((SimpleNode)node.jjtGetChild(0));
			
    }
	return out;
  }
  public static FA parseString(String regex) throws Exception{
	  	InputStream stream = new ByteArrayInputStream(regex.getBytes(StandardCharsets.UTF_8));
	  	RegexParser.ReInit(stream);
	  	return eval(RegexParser.Start());
  }}PARSER_END(RegexParser)SKIP :{  " "| "\t"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LITERALS */{
  < ENDL : "\n">| < OPEN : "(">
| < CLOSE : ")">
| < STAR : "*">
| < PLUS : "+">
| < EPSILON : "!">
| < SYM : ~["(",")","*","+","!"] >
}SimpleNode Start() :{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  Expression() (< ENDL >| < EOF >)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
    {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Expression()      :
{}
{
  Expression1() [ < PLUS > Expression()/*@bgen(jjtree) #Op( 2) */
                                        {
                                          SimpleNode jjtn001 = new SimpleNode(JJTOP);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn001,  2);
                                          jjtc001 = false;
                                        }
/*@egen*/ {jjtn001.setOp("+");}/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  2);
                                          }
                                        }
/*@egen*/       ]
}

void Expression1()        :
{}
{
  Expression2() [Expression1()/*@bgen(jjtree) #Op( 2) */
                              {
                                SimpleNode jjtn001 = new SimpleNode(JJTOP);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001,  2);
                                jjtc001 = false;
                              }
/*@egen*/{ jjtn001.setOp(".");}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                }
                              }
/*@egen*/       ]
}

void Expression2()       :
{}
{
  ((< OPEN > Expression() < CLOSE >)| Terminal()) [< STAR >/*@bgen(jjtree) #Op( 1) */
                                                            {
                                                              SimpleNode jjtn001 = new SimpleNode(JJTOP);
                                                              boolean jjtc001 = true;
                                                              jjtree.openNodeScope(jjtn001);
                                                            }
                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                            {
                                                              jjtree.closeNodeScope(jjtn001,  1);
                                                              jjtc001 = false;
                                                            }
/*@egen*/ {jjtn001.setOp("star");}/*@bgen(jjtree)*/
                                                            } finally {
                                                              if (jjtc001) {
                                                                jjtree.closeNodeScope(jjtn001,  1);
                                                              }
                                                            }
/*@egen*/       ]
}

void Terminal()          :
{/*@bgen(jjtree) Terminal */
 SimpleNode jjtn000 = new SimpleNode(JJTTERMINAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Terminal */
  try {
/*@egen*/
  t = < SYM >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {
    jjtn000.symbol = t.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

