/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. FileParser.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  LOOKAHEAD= 1;                               }PARSER_BEGIN(FileParser)package fileparser;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.FileOutputStream;
import java.io.PrintStream;
import faops.FA;
import java.util.ArrayList;
public class FileParser/*@bgen(jjtree)*/implements FileParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTFileParserState jjtree = new JJTFileParserState();

/*@egen*/
  public static FileInputStream getFile(String filename)  throws FileNotFoundException  {	return new FileInputStream(new File(FileParser.class.getResource(filename).getPath()));
  }
  public static PrintStream outFile(String filename)  throws FileNotFoundException  {	return new PrintStream(new FileOutputStream(filename, false));
  }  public static void main(String args []) throws FileNotFoundException  {    System.out.println("Reading from standard input...");
    SimpleNode n1;
    SimpleNode n2;
    FileParser fp = new FileParser(getFile("product1.dot"));
    try {
		n1 = FileParser.Start();
	} catch (ParseException e1) {
		e1.printStackTrace();
		return;
	}
    FileParser.ReInit(getFile("product2.dot"));
    try {
		n2 = FileParser.Start();
	} catch (ParseException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
		return;
	}
    try
    {
      n1.dump("");
      n2.dump("");
      FA fa1 = toFa(n1);
      FA fa2 = toFa(n2);
      if (fa1 != null && fa2 != null)
      {
        //fa.toDFA().toDot(new PrintStream(new FileOutputStream("src/fileparser/dfa.dot", false)));
    	FA fa = FA.product(null, fa1,fa2);
    	fa.toDot(new PrintStream(new FileOutputStream("src/fileparser/product.dot", false)));
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        while (true)
        {
          System.out.println("Input:");
          String s = reader.readLine();
          if (fa.process(s.split(""))) System.out.println("yes");
          else System.out.println("no");
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }  }  private static class Transition {
	  String symbol;
	  int src;
	  int dst;
	  public Transition(String symbol, int src, int dst){
		  this.symbol = symbol;
		  this.src = src;
		  this.dst = dst;
	  }
  }  public static FA toFa(SimpleNode root)  {    FA out = new FA();    ArrayList < String > stateNames = new ArrayList < String > ();
    ArrayList< Transition > transitions = new ArrayList < Transition > ();    try    {      for (int i = 0; i < root.jjtGetNumChildren(); i++)      {        faRead(root.jjtGetChild(i), out, stateNames, transitions);      }    }    catch (Exception e)    {      e.printStackTrace();      return null;    }
    for(Transition t : transitions)    {		out.addTransition(t.symbol, t.src, t.dst);
		//System.out.println("Added transition " + t.src + "-(" + t.symbol + ")->" + t.dst);
  	}
    out.finalizeConstruction();
    out.computeIsDFA();    return out;  } public static int lookup(FA fa, String state, ArrayList < String > stateNames){
	  int index = stateNames.indexOf(state);
      if (index == - 1){
        	//System.out.println("Added state " + state + " as " + stateNames.size());
    	  stateNames.add(state);
    	  fa.incNumStates();
    	  return stateNames.size() - 1;
      } else {
    	  return index;
      }
  }
  public static String faRead(Node node, FA fa, ArrayList < String > stateNames, ArrayList< Transition > transitions)
  {
	String out = "";
    switch (((SimpleNode) node).id)
    {
      case FileParserTreeConstants.JJTSTATE : StateNode stateNode = (StateNode) node;
	      if (stateNode.isStartState)
	      {
	        int index = lookup(fa, stateNode.names.get(0), stateNames);
	        fa.setInitialState(index);
	      }
	      else
	      {
	    	for(String name : stateNode.names){
	    		if (stateNames.contains(name)) {
	    			out+="State " + name + " is repeated";
	    			continue;
	    		}
	            fa.incNumStates();
	            if (stateNode.isFinalState) 
	            	fa.addFinalState(stateNames.size());
	            stateNames.add(name);
	           // System.out.println("Added state " + name + " as " + (stateNames.size() - 1));
	    	}
	      }
	      break;
      case FileParserTreeConstants.JJTTRANSITION :
	      TransitionNode tNode = (TransitionNode) node;
	      int srcindex =  lookup(fa, tNode.src, stateNames);
	      int dstindex = lookup(fa, tNode.dst, stateNames);
	      for (String symbol : tNode.symbols)
	      {
	        //fa.addTransition(symbol, srcindex, dstindex);
	        transitions.add(new Transition(symbol, srcindex, dstindex));
	      }
	      break;
    }
    for (int i = 0; i < node.jjtGetNumChildren(); i++)
    {
      out += faRead(node.jjtGetChild(i), fa, stateNames, transitions);
    }
    return out;
  }}PARSER_END(FileParser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LITERALS */{  < DIGRAPH : "digraph" >| < RANKDIR : "rankdir" >| < START : "start" >| < SHAPE : "shape" >| < COLOR : "color" >| < FONTCOLOR : "fontcolor" >| < POINT : "point" >| < WHITE : "white" >| < BLACK : "black" >| < LABEL : "label" >| < CIRCLE : "circle" >| < DOUBLECIRCLE : "doublecircle" >| < NODE : "node" >| < LR : "LR" >| < OPEN : "[" >| < CLOSE : "]" >
| < EQUALS : "=">| < ENDSTMT : ";" >
| < QUOTE : "\"" >| < ID : ([ "0"-"9", "A"-"Z", "a"-"z", "_", "!", "."])+>}
SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = (SimpleNode)NodeFactory.jjtCreate(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  < DIGRAPH > (Identifier())? "{"
  (
    RankDir()
  )?
  StartDecl()/*@bgen(jjtree) States */
  {
    SimpleNode jjtn001 = (SimpleNode)NodeFactory.jjtCreate(JJTSTATES);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    StateDecl()
  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
         
  //(< NODE > < OPEN > < SHAPE > < EQUALS > < CIRCLE > < OPEN > (< ENDSTMT >)* )
  StartState()/*@bgen(jjtree) Transitions */
{
  SimpleNode jjtn002 = (SimpleNode)NodeFactory.jjtCreate(JJTTRANSITIONS);
  boolean jjtc002 = true;
  jjtree.openNodeScope(jjtn002);
}
try {
/*@egen*/
(
  TransitionNode()
)+/*@bgen(jjtree)*/
} catch (Throwable jjte002) {
  if (jjtc002) {
    jjtree.clearNodeScope(jjtn002);
    jjtc002 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte002 instanceof RuntimeException) {
    throw (RuntimeException)jjte002;
  }
  if (jjte002 instanceof ParseException) {
    throw (ParseException)jjte002;
  }
  throw (Error)jjte002;
} finally {
  if (jjtc002) {
    jjtree.closeNodeScope(jjtn002, true);
  }
}
/*@egen*/
            
"}" < EOF >/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
  return jjtn000;
}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void RankDir()       :
{}
{
  < RANKDIR > < EQUALS > < LR > (< ENDSTMT >)?
}

void StartDecl()       :
{}
{
  < NODE > < OPEN > < SHAPE > < EQUALS > < POINT > "," < COLOR > "=" < WHITE > "," < FONTCOLOR > "=" < WHITE > < CLOSE > (< ENDSTMT >)? < START > (< ENDSTMT >)?
}

void StateDecl()        :
{/*@bgen(jjtree) State */
  SimpleNode jjtn000 = (SimpleNode)NodeFactory.jjtCreate(JJTSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token stateName;
}
{/*@bgen(jjtree) State */
  try {
/*@egen*/
  < NODE > < OPEN > < SHAPE > < EQUALS >
  (
    (
      < DOUBLECIRCLE >
      {
        ((StateNode) jjtn000).isFinalState = true;
      }
    )
  | (< CIRCLE >)
  )
  "," < COLOR > < EQUALS > < BLACK > "," < FONTCOLOR > "=" < BLACK > < CLOSE > (< ENDSTMT >)? (stateName = Identifier()
  {
    ((StateNode) jjtn000).addState(stateName.image);
  })+
  (< ENDSTMT >)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token Identifier()       :{
  Token token;}
{
  (token  = < ID >)  {
    return token;  }
  |
  (< QUOTE > token  = < ID > < QUOTE >)  {	return token;
  }}

void StartState()        :
{/*@bgen(jjtree) State */
  SimpleNode jjtn000 = (SimpleNode)NodeFactory.jjtCreate(JJTSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token startStatename;
}
{/*@bgen(jjtree) State */
  try {
/*@egen*/
  < START > "->" startStatename = Identifier()
  {
    ((StateNode) jjtn000).addState(startStatename.image);
    ((StateNode) jjtn000).isStartState = true;
  }
  (< ENDSTMT >)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TransitionNode()             :
{/*@bgen(jjtree) Transition */
  SimpleNode jjtn000 = (SimpleNode)NodeFactory.jjtCreate(JJTTRANSITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token src;
  Token dst;
  Token transition;
}
{/*@bgen(jjtree) Transition */
  try {
/*@egen*/
  src = Identifier()
  {
    ((TransitionNode) jjtn000).src = StateNode.removeQuotes(src.image);
  }
  "->"
  dst = Identifier()
  {
    ((TransitionNode) jjtn000).dst = StateNode.removeQuotes(dst.image);
  }
  < OPEN > < LABEL > < EQUALS > "\""
  transition = < ID >
  {
    ((TransitionNode) jjtn000).addTransition(transition.image);
    //System.out.println(((TransitionNode) jjtThis).src + "-(" + transition.image +")->" +  ((TransitionNode) jjtThis).dst);
  }
   (
    ","
    transition = < ID >
    {
      ((TransitionNode) jjtn000).addTransition(transition.image);
    }
  )*
  "\"" < CLOSE > (< ENDSTMT >)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
