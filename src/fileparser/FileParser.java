/* Generated By:JJTree&JavaCC: Do not edit this line. FileParser.java */
package fileparser;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.FileOutputStream;
import java.io.PrintStream;
import faops.FA;
import java.util.ArrayList;

public class FileParser/*@bgen(jjtree)*/implements FileParserTreeConstants, FileParserConstants {/*@bgen(jjtree)*/
  protected static JJTFileParserState jjtree = new JJTFileParserState();public static FileInputStream getFile(String filename)  throws FileNotFoundException
  {
        return new FileInputStream(new File(FileParser.class.getResource(filename).getPath()));
  }
  public static PrintStream outFile(String filename)  throws FileNotFoundException
  {
        return new PrintStream(new FileOutputStream(filename, false));
  }
  public static void main(String args []) throws FileNotFoundException
  {
    System.out.println("Reading from standard input...");
    SimpleNode n1;
    SimpleNode n2;
    FileParser fp = new FileParser(getFile("product1.dot"));
    try {
                n1 = FileParser.Start();
        } catch (ParseException e1) {
                e1.printStackTrace();
                return;
        }
    FileParser.ReInit(getFile("product2.dot"));
    try {
                n2 = FileParser.Start();
        } catch (ParseException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
                return;
        }
    try
    {
      n1.dump("");
      n2.dump("");
      FA fa1 = toFa(n1);
      FA fa2 = toFa(n2);
      if (fa1 != null && fa2 != null)
      {
        //fa.toDFA().toDot(new PrintStream(new FileOutputStream("src/fileparser/dfa.dot", false)));
        FA fa = FA.product(null, fa1,fa2);
        fa.toDot(new PrintStream(new FileOutputStream("src/fileparser/product.dot", false)));
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        while (true)
        {
          System.out.println("Input:");
          String s = reader.readLine();
          if (fa.process(s.split(""))) System.out.println("yes");
          else System.out.println("no");
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }
  private static class Transition {
          String symbol;
          int src;
          int dst;
          public Transition(String symbol, int src, int dst){
                  this.symbol = symbol;
                  this.src = src;
                  this.dst = dst;
          }
  }
  public static FA toFa(SimpleNode root)
  {
    FA out = new FA();
    ArrayList < String > stateNames = new ArrayList < String > ();
    ArrayList< Transition > transitions = new ArrayList < Transition > ();
    try
    {
      for (int i = 0; i < root.jjtGetNumChildren(); i++)
      {
        faRead(root.jjtGetChild(i), out, stateNames, transitions);
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
      return null;
    }
    for(Transition t : transitions)
    {
                out.addTransition(t.symbol, t.src, t.dst);
                //System.out.println("Added transition " + t.src + "-(" + t.symbol + ")->" + t.dst);
        }
    out.finalizeConstruction();
    out.computeIsDFA();
    return out;
  }
 public static int lookup(FA fa, String state, ArrayList < String > stateNames){
          int index = stateNames.indexOf(state);
      if (index == - 1){
                //System.out.println("Added state " + state + " as " + stateNames.size());
          stateNames.add(state);
          fa.incNumStates();
          return stateNames.size() - 1;
      } else {
          return index;
      }
  }
  public static String faRead(Node node, FA fa, ArrayList < String > stateNames, ArrayList< Transition > transitions)
  {
        String out = "";
    switch (((SimpleNode) node).id)
    {
      case FileParserTreeConstants.JJTSTATE : StateNode stateNode = (StateNode) node;
              if (stateNode.isStartState)
              {
                int index = lookup(fa, stateNode.names.get(0), stateNames);
                fa.setInitialState(index);
              }
              else
              {
                for(String name : stateNode.names){
                        if (stateNames.contains(name)) {
                                out+="State " + name + " is repeated";
                                continue;
                        }
                    fa.incNumStates();
                    if (stateNode.isFinalState)
                        fa.addFinalState(stateNames.size());
                    stateNames.add(name);
                   // System.out.println("Added state " + name + " as " + (stateNames.size() - 1));
                }
              }
              break;
      case FileParserTreeConstants.JJTTRANSITION :
              TransitionNode tNode = (TransitionNode) node;
              int srcindex =  lookup(fa, tNode.src, stateNames);
              int dstindex = lookup(fa, tNode.dst, stateNames);
              for (String symbol : tNode.symbols)
              {
                //fa.addTransition(symbol, srcindex, dstindex);
                transitions.add(new Transition(symbol, srcindex, dstindex));
              }
              break;
    }
    for (int i = 0; i < node.jjtGetNumChildren(); i++)
    {
      out += faRead(node.jjtGetChild(i), fa, stateNames, transitions);
    }
    return out;
  }

  static final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = (SimpleNode)NodeFactory.jjtCreate(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIGRAPH);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTE:
      case ID:
        Identifier();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(27);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RANKDIR:
        RankDir();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      StartDecl();
    SimpleNode jjtn001 = (SimpleNode)NodeFactory.jjtCreate(JJTSTATES);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        label_1:
        while (true) {
          StateDecl();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NODE:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_1;
          }
        }
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      StartState();
  SimpleNode jjtn002 = (SimpleNode)NodeFactory.jjtCreate(JJTTRANSITIONS);
  boolean jjtc002 = true;
  jjtree.openNodeScope(jjtn002);
      try {
        label_2:
        while (true) {
          TransitionNode();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case QUOTE:
          case ID:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_2;
          }
        }
      } catch (Throwable jjte002) {
  if (jjtc002) {
    jjtree.clearNodeScope(jjtn002);
    jjtc002 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte002 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte002;}
  }
  if (jjte002 instanceof ParseException) {
    {if (true) throw (ParseException)jjte002;}
  }
  {if (true) throw (Error)jjte002;}
      } finally {
  if (jjtc002) {
    jjtree.closeNodeScope(jjtn002, true);
  }
      }
      jj_consume_token(28);
      jj_consume_token(0);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void RankDir() throws ParseException {
    jj_consume_token(RANKDIR);
    jj_consume_token(EQUALS);
    jj_consume_token(LR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDSTMT:
      jj_consume_token(ENDSTMT);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  static final public void StartDecl() throws ParseException {
    jj_consume_token(NODE);
    jj_consume_token(OPEN);
    jj_consume_token(SHAPE);
    jj_consume_token(EQUALS);
    jj_consume_token(POINT);
    jj_consume_token(29);
    jj_consume_token(COLOR);
    jj_consume_token(EQUALS);
    jj_consume_token(WHITE);
    jj_consume_token(29);
    jj_consume_token(FONTCOLOR);
    jj_consume_token(EQUALS);
    jj_consume_token(WHITE);
    jj_consume_token(CLOSE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDSTMT:
      jj_consume_token(ENDSTMT);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(START);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDSTMT:
      jj_consume_token(ENDSTMT);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void StateDecl() throws ParseException {
 /*@bgen(jjtree) State */
  SimpleNode jjtn000 = (SimpleNode)NodeFactory.jjtCreate(JJTSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token stateName;
    try {
      jj_consume_token(NODE);
      jj_consume_token(OPEN);
      jj_consume_token(SHAPE);
      jj_consume_token(EQUALS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLECIRCLE:
        jj_consume_token(DOUBLECIRCLE);
        ((StateNode) jjtn000).isFinalState = true;
        break;
      case CIRCLE:
        jj_consume_token(CIRCLE);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(29);
      jj_consume_token(COLOR);
      jj_consume_token(EQUALS);
      jj_consume_token(BLACK);
      jj_consume_token(29);
      jj_consume_token(FONTCOLOR);
      jj_consume_token(EQUALS);
      jj_consume_token(BLACK);
      jj_consume_token(CLOSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDSTMT:
        jj_consume_token(ENDSTMT);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      label_3:
      while (true) {
        stateName = Identifier();
    ((StateNode) jjtn000).addState(stateName.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUOTE:
        case ID:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDSTMT:
        jj_consume_token(ENDSTMT);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public Token Identifier() throws ParseException {
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      token = jj_consume_token(ID);
    {if (true) return token;}
      break;
    case QUOTE:
      jj_consume_token(QUOTE);
      token = jj_consume_token(ID);
      jj_consume_token(QUOTE);
        {if (true) return token;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void StartState() throws ParseException {
 /*@bgen(jjtree) State */
  SimpleNode jjtn000 = (SimpleNode)NodeFactory.jjtCreate(JJTSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token startStatename;
    try {
      jj_consume_token(START);
      jj_consume_token(30);
      startStatename = Identifier();
    ((StateNode) jjtn000).addState(startStatename.image);
    ((StateNode) jjtn000).isStartState = true;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDSTMT:
        jj_consume_token(ENDSTMT);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TransitionNode() throws ParseException {
 /*@bgen(jjtree) Transition */
  SimpleNode jjtn000 = (SimpleNode)NodeFactory.jjtCreate(JJTTRANSITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token src;
  Token dst;
  Token transition;
    try {
      src = Identifier();
    ((TransitionNode) jjtn000).src = StateNode.removeQuotes(src.image);
      jj_consume_token(30);
      dst = Identifier();
    ((TransitionNode) jjtn000).dst = StateNode.removeQuotes(dst.image);
      jj_consume_token(OPEN);
      jj_consume_token(LABEL);
      jj_consume_token(EQUALS);
      jj_consume_token(QUOTE);
      transition = jj_consume_token(ID);
    ((TransitionNode) jjtn000).addTransition(transition.image);
    //System.out.println(((TransitionNode) jjtThis).src + "-(" + transition.image +")->" +  ((TransitionNode) jjtThis).dst);

      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 29:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
        jj_consume_token(29);
        transition = jj_consume_token(ID);
      ((TransitionNode) jjtn000).addTransition(transition.image);
      }
      jj_consume_token(QUOTE);
      jj_consume_token(CLOSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDSTMT:
        jj_consume_token(ENDSTMT);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FileParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6000000,0x100,0x80000,0x6000000,0x1000000,0x1000000,0x1000000,0x60000,0x1000000,0x6000000,0x1000000,0x6000000,0x1000000,0x20000000,0x1000000,};
   }

  /** Constructor with InputStream. */
  public FileParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FileParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FileParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public FileParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FileParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public FileParser(FileParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FileParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
