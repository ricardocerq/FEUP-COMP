/* Generated By:JJTree&JavaCC: Do not edit this line. StmtParser.java */
package stmtparser;
import faops.FA;
import fileparser.FileParser;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;

import gui.FADrawer;
import regexparser.RegexParser;

public class StmtParser/*@bgen(jjtree)*/implements StmtParserTreeConstants, StmtParserConstants {/*@bgen(jjtree)*/
  protected static JJTStmtParserState jjtree = new JJTStmtParserState();private static Map<String, FA> vars = new HashMap< String, FA>();
  private static int drawNumber = 0;
  public static void main(String args [])
  {
    new StmtParser(System.in);
    new FileParser(System.in);
    new RegexParser(System.in);
    while (true)
    {
      try
      {
        System.out.println("Reading from standard input...");
        SimpleNode n = StmtParser.Root();
        System.out.println("Printing...");
        n.dump("");
        System.out.println("\u005cn");
        eval(n);
        StmtParser.ReInit(System.in);
      }
      catch (Exception e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        e.printStackTrace();
        break;
      }
    }
  }
  public static FA eval(SimpleNode node) throws Exception
  {
    FA out = null;
    switch(node.id){
                case StmtParserTreeConstants.JJTASSIGN:
                        AssignNode an = (AssignNode) node;
                        if (an.isDecl()) {
                                if(vars.get(an.varName) != null)
                                        throw new Exception("Variable " + an.varName + " was redeclared");
                        }
                        out = eval((SimpleNode)node.jjtGetChild(0));
                        vars.put(an.varName, out);
                        break;
                case StmtParserTreeConstants.JJTOP:
                        OpNode on = (OpNode) node;
                        if(on.isBinary()){
                                SimpleNode lhs = (SimpleNode) node.jjtGetChild(0);
                                SimpleNode rhs = (SimpleNode) node.jjtGetChild(1);
                                if(on.op == Operations.Op.DUMP){
                                        out = eval(lhs);
                                        out.toDot(new PrintStream(new FileOutputStream("src/fileparser/" + ((StringNode)rhs).getString(), false)));
                                }
                                else if(on.op == Operations.Op.UNI){
                                        FA fa = eval(lhs);
                                        FA fb = eval(rhs);
                                        out = faops.FA.quickUnion(fa,fb);
                                } else if(on.op == Operations.Op.CAT){
                                        FA fa = eval(lhs);
                                        FA fb = eval(rhs);
                                        out = faops.FA.cat(fa,fb);
                                } else if(on.op == Operations.Op.INT){
                                        FA fa = eval(lhs);
                                        FA fb = eval(rhs);
                                        out = faops.FA.product(null,fa,fb);
                                } else if(on.op == Operations.Op.XOR){
                                } else if(on.op == Operations.Op.MUL){
                                } else if(on.op == Operations.Op.DIF){
                                }
                        }
                        else {
                          SimpleNode arg = (SimpleNode) node.jjtGetChild(0);
                          if(on.op == Operations.Op.NEW){
                            FileParser.ReInit(new FileInputStream(new File(FileParser.class.getResource(((StringNode)arg).getString()).getPath())));
                            out = FileParser.toFa(FileParser.Start());
                          } else if(on.op == Operations.Op.FROMREGEX){

                            try
                            {
                                out = RegexParser.parseString(((StringNode)arg).getString());
                                } catch(Exception e) {
                                  System.err.println("Error in Regex");
                                  e.printStackTrace();
                                }
                          } else if(on.op == Operations.Op.PRINT){
                            out = eval(arg);
                            System.out.println(out);
                          } else if(on.op == Operations.Op.DRAW){
                            out = eval(arg);
                            new FADrawer(out, ++drawNumber);
                          } else if(on.op == Operations.Op.STAR){
                            out = faops.FA.star(eval(arg));
                          } else if(on.op == Operations.Op.REV){
                          } else if(on.op == Operations.Op.NOT){
                          } else if(on.op == Operations.Op.TODFA){
                            out = eval(arg).toDFA();
                          } else if(on.op == Operations.Op.MIN){
                          }
                        }
                        break;
                case StmtParserTreeConstants.JJTSTRING:
                        StringNode sn = (StringNode) node;
                        break;
                case StmtParserTreeConstants.JJTSYMBOL:
                        SymNode syn = (SymNode) node;
                        out = vars.get(syn.varName);
                        if(out == null)
                                throw new Exception("Variable " + syn.varName + " does not exist");
                        break;
                default:
                        for(int i = 0; i < node.jjtGetNumChildren(); i++){
                          eval((SimpleNode)node.jjtGetChild(i));
                        }
    }
        return out;
  }

  static final public SimpleNode Root() throws ParseException {
 /*@bgen(jjtree) Root */
  SimpleNode jjtn000 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        Stmt();
        label_2:
        while (true) {
          jj_consume_token(END_STMT);
          if (jj_2_1(10)) {
            ;
          } else {
            break label_2;
          }
        }
        if (jj_2_2(10)) {
          ;
        } else {
          break label_1;
        }
      }
      jj_consume_token(ENDL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Stmt() throws ParseException {
                    String decl = null;
    SimpleNode jjtn001 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTASSIGN);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      if (jj_2_3(10)) {
        decl = Decl();
      } else {
        ;
      }
      Expression0();
                                   jjtree.closeNodeScope(jjtn001,  decl != null);
                                   jjtc001 = false;
                                  ((AssignNode)jjtn001).varName = decl; ((AssignNode)jjtn001).decl = true;
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  decl != null);
    }
    }
  }

  static final public void Expression0() throws ParseException {
                           String assign = null;
    SimpleNode jjtn001 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTASSIGN);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      if (jj_2_4(10)) {
        assign = Assign();
      } else {
        ;
      }
      Expression();
                                      jjtree.closeNodeScope(jjtn001,  assign != null);
                                      jjtc001 = false;
                                     ((AssignNode)jjtn001).varName = assign;
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  assign != null);
    }
    }
  }

  static final public void Expression() throws ParseException {
                          String op;
    Expression2();
    if (jj_2_5(10)) {
      op = BinaryOpTier1();
      Expression();
                                                         SimpleNode jjtn001 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTOP);
                                                         boolean jjtc001 = true;
                                                         jjtree.openNodeScope(jjtn001);
      try {
                                                         jjtree.closeNodeScope(jjtn001,  2);
                                                         jjtc001 = false;
                                                         ((OpNode)jjtn001).setOp(op);
      } finally {
                                                         if (jjtc001) {
                                                           jjtree.closeNodeScope(jjtn001,  2);
                                                         }
      }
    } else {
      ;
    }
  }

  static final public void Expression2() throws ParseException {
                           String op;
    Expression3();
    if (jj_2_6(10)) {
      op = BinaryOpTier2();
      Expression();
                                                         SimpleNode jjtn001 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTOP);
                                                         boolean jjtc001 = true;
                                                         jjtree.openNodeScope(jjtn001);
      try {
                                                         jjtree.closeNodeScope(jjtn001,  2);
                                                         jjtc001 = false;
                                                         ((OpNode)jjtn001).setOp(op);
      } finally {
                                                         if (jjtc001) {
                                                           jjtree.closeNodeScope(jjtn001,  2);
                                                         }
      }
    } else {
      ;
    }
  }

  static final public void Expression3() throws ParseException {
                           String str;
    if (jj_2_7(10)) {
      UnaryOp();
    } else if (jj_2_8(10)) {
      Symbol();
    } else if (jj_2_9(10)) {
      jj_consume_token(OPEN);
      Expression0();
      jj_consume_token(CLOSE);
    } else if (jj_2_10(10)) {
      New();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_11(10)) {
      str = Func();
                                                                                   SimpleNode jjtn001 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTOP);
                                                                                   boolean jjtc001 = true;
                                                                                   jjtree.openNodeScope(jjtn001);
      try {
                                                                                   jjtree.closeNodeScope(jjtn001,  2);
                                                                                   jjtc001 = false;
                                                                                  ((OpNode)jjtn001).setOp(str);
      } finally {
                                                                                   if (jjtc001) {
                                                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                                                   }
      }
    } else {
      ;
    }
  }

  static final public String Func() throws ParseException {
                       Token op;
    jj_consume_token(DOT);
    op = jj_consume_token(DUMP);
    jj_consume_token(OPEN);
    String();
    jj_consume_token(CLOSE);
          {if (true) return op.image;}
    throw new Error("Missing return statement in function");
  }

  static final public void String() throws ParseException {
                         /*@bgen(jjtree) String */
                         SimpleNode jjtn000 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTSTRING);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
          ((StringNode)jjtn000).setString(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public String Decl() throws ParseException {
                      Token t;
    jj_consume_token(FA);
    t = jj_consume_token(SYM);
    jj_consume_token(30);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String Assign() throws ParseException {
                       Token t;
    t = jj_consume_token(SYM);
    jj_consume_token(30);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public void Symbol() throws ParseException {
                        /*@bgen(jjtree) Symbol */
                        SimpleNode jjtn000 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTSYMBOL);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SYM);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        ((SymNode)jjtn000).varName = t.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void UnaryOp() throws ParseException {
                     /*@bgen(jjtree) Op */
                     SimpleNode jjtn000 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTOP);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_12(10)) {
        t = jj_consume_token(REV);
      } else if (jj_2_13(10)) {
        t = jj_consume_token(NOT);
      } else if (jj_2_14(10)) {
        t = jj_consume_token(STAR);
      } else if (jj_2_15(10)) {
        t = jj_consume_token(MIN);
      } else if (jj_2_16(10)) {
        t = jj_consume_token(TODFA);
      } else if (jj_2_17(10)) {
        t = jj_consume_token(PRINT);
      } else if (jj_2_18(10)) {
        t = jj_consume_token(DRAW);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    ((OpNode)jjtn000).setOp(t.image);
      jj_consume_token(OPEN);
      Expression0();
      jj_consume_token(CLOSE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void New() throws ParseException {
                 /*@bgen(jjtree) Op */
                 SimpleNode jjtn000 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTOP);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_19(10)) {
        t = jj_consume_token(NEW);
      } else if (jj_2_20(10)) {
        t = jj_consume_token(FROMREGEX);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    ((OpNode)jjtn000).setOp(t.image);
      jj_consume_token(OPEN);
      String();
      jj_consume_token(CLOSE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public String BinaryOpTier1() throws ParseException {
                               Token t;
    t = jj_consume_token(UN);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String BinaryOpTier2() throws ParseException {
                               Token t;
    if (jj_2_21(10)) {
      t = jj_consume_token(MUL);
    } else if (jj_2_22(10)) {
      t = jj_consume_token(DOT);
    } else if (jj_2_23(10)) {
      t = jj_consume_token(INT);
    } else if (jj_2_24(10)) {
      t = jj_consume_token(XOR);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_3_11() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(FROMREGEX)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(UN)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    if (jj_scan_token(OPEN)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(REV)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(OPEN)) return true;
    if (jj_3R_11()) return true;
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(DRAW)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(SYM)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(SYM)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(OPEN)) return true;
    if (jj_3R_11()) return true;
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(PRINT)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(FA)) return true;
    if (jj_scan_token(SYM)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_8()) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(DUMP)) return true;
    if (jj_scan_token(OPEN)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_6()) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(TODFA)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(END_STMT)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_3()) return true;
    Token xsp;
    if (jj_3_1()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public StmtParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[24];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public StmtParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public StmtParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new StmtParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public StmtParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new StmtParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public StmtParser(StmtParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(StmtParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 24; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
