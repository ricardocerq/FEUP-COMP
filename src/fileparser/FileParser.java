/* Generated By:JJTree&JavaCC: Do not edit this line. FileParser.java */
package fileparser;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.FileOutputStream;
import java.io.PrintStream;

import faops.FA;

import java.util.ArrayList;
import java.util.Arrays;
public class FileParser/*@bgen(jjtree)*/implements FileParserTreeConstants, FileParserConstants {/*@bgen(jjtree)*/
  protected static JJTFileParserState jjtree = new JJTFileParserState();public static void main(String args []) throws FileNotFoundException
  {
    System.out.println("Reading from standard input...");
    SimpleNode n1;
    SimpleNode n2;
    FileParser fp = new FileParser(new FileInputStream(new File(FileParser.class.getResource("product1.dot").getPath())));
    try {
                n1 = FileParser.Start();
        } catch (ParseException e1) {
                e1.printStackTrace();
                return;
        }
    FileParser.ReInit(new FileInputStream(new File(FileParser.class.getResource("product2.dot").getPath())));
    try {
                n2 = FileParser.Start();
        } catch (ParseException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
                return;
        }
    try
    {
      n1.dump("");
      n2.dump("");
      FA fa1 = toFa(n1);
      FA fa2 = toFa(n2);
      if (fa1 != null && fa2 != null)
      {
        //fa.toDFA().toDot(new PrintStream(new FileOutputStream("src/fileparser/dfa.dot", false)));
        FA fa = FA.product(null, fa1,fa2);
        fa.toDot(new PrintStream(new FileOutputStream("src/fileparser/product.dot", false)));
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        while (true)
        {
          System.out.println("Input:");
          String s = reader.readLine();
          if (fa.process(s.split(""))) System.out.println("yes");
          else System.out.println("no");
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }

  public static FA toFa(SimpleNode root)
  {
    FA out = new FA();
    ArrayList < String > stateNames = new ArrayList < String > ();
    try
    {
      for (int i = 0; i < root.jjtGetNumChildren(); i++)
      {
        faRead(root.jjtGetChild(i), out, stateNames);
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
      return null;
    }
    out.computeIsDFA();
    return out;
  }

  public static void faRead(Node node, FA fa, ArrayList < String > stateNames) throws Exception
  {
    switch (((SimpleNode) node).id)
    {
      case FileParserTreeConstants.JJTSTATE : StateNode stateNode = (StateNode) node;
      if (stateNode.isStartState)
      {
        int index = stateNames.indexOf(stateNode.name);
        if (index == - 1) throw new Exception("Start State does not exist");
        fa.setInitialState(index);
      }
      else
      {
        if (stateNames.contains(stateNode.name)) throw new Exception("State " + stateNode.name + " is repeated");
        fa.incNumStates();
        if (stateNode.isFinalState) fa.addFinalState(stateNames.size());
        stateNames.add(stateNode.name);
      }
      break;
      case FileParserTreeConstants.JJTTRANSITION :
      TransitionNode tNode = (TransitionNode) node;
      int srcindex = stateNames.indexOf(tNode.src);
      if (srcindex == - 1) throw new Exception("Source State" + tNode.src + "does not exist");
      int dstindex = stateNames.indexOf(tNode.dst);
      if (dstindex == - 1) throw new Exception("Destination State " + tNode.dst + " does not exist");
      for (String symbol : tNode.symbols)
      {
        fa.addTransition(symbol, srcindex, dstindex);
      }
      break;
    }
    for (int i = 0; i < node.jjtGetNumChildren(); i++)
    {
      faRead(node.jjtGetChild(i), fa, stateNames);
    }
  }

  static final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = (SimpleNode)NodeFactory.jjtCreate(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIGRAPH);
      if (jj_2_1(1000)) {
        jj_consume_token(ID);
      } else {
        ;
      }
      jj_consume_token(25);
      if (jj_2_2(1000)) {
        RankDir();
      } else {
        ;
      }
      StartDecl();
    SimpleNode jjtn001 = (SimpleNode)NodeFactory.jjtCreate(JJTSTATES);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        label_1:
        while (true) {
          StateDecl();
          if (jj_2_3(1000)) {
            ;
          } else {
            break label_1;
          }
        }
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      StartState();
  SimpleNode jjtn002 = (SimpleNode)NodeFactory.jjtCreate(JJTTRANSITIONS);
  boolean jjtc002 = true;
  jjtree.openNodeScope(jjtn002);
      try {
        label_2:
        while (true) {
          TransitionNode();
          if (jj_2_4(1000)) {
            ;
          } else {
            break label_2;
          }
        }
      } catch (Throwable jjte002) {
  if (jjtc002) {
    jjtree.clearNodeScope(jjtn002);
    jjtc002 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte002 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte002;}
  }
  if (jjte002 instanceof ParseException) {
    {if (true) throw (ParseException)jjte002;}
  }
  {if (true) throw (Error)jjte002;}
      } finally {
  if (jjtc002) {
    jjtree.closeNodeScope(jjtn002, true);
  }
      }
      jj_consume_token(26);
      jj_consume_token(0);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void RankDir() throws ParseException {
    jj_consume_token(RANKDIR);
    jj_consume_token(27);
    jj_consume_token(LR);
    jj_consume_token(ENDSTMT);
  }

  static final public void StartDecl() throws ParseException {
    jj_consume_token(NODE);
    jj_consume_token(OPEN);
    jj_consume_token(SHAPE);
    jj_consume_token(27);
    jj_consume_token(POINT);
    jj_consume_token(28);
    jj_consume_token(COLOR);
    jj_consume_token(27);
    jj_consume_token(WHITE);
    jj_consume_token(28);
    jj_consume_token(FONTCOLOR);
    jj_consume_token(27);
    jj_consume_token(WHITE);
    jj_consume_token(CLOSE);
    jj_consume_token(ENDSTMT);
    jj_consume_token(START);
    jj_consume_token(ENDSTMT);
  }

  static final public void StateDecl() throws ParseException {
 /*@bgen(jjtree) State */
  SimpleNode jjtn000 = (SimpleNode)NodeFactory.jjtCreate(JJTSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token stateName;
    try {
      jj_consume_token(NODE);
      jj_consume_token(OPEN);
      jj_consume_token(SHAPE);
      jj_consume_token(27);
      if (jj_2_5(1000)) {
        jj_consume_token(DOUBLECIRCLE);
        ((StateNode) jjtn000).isFinalState = true;
      } else if (jj_2_6(1000)) {
        jj_consume_token(CIRCLE);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(28);
      jj_consume_token(COLOR);
      jj_consume_token(27);
      jj_consume_token(BLACK);
      jj_consume_token(28);
      jj_consume_token(FONTCOLOR);
      jj_consume_token(27);
      jj_consume_token(BLACK);
      jj_consume_token(CLOSE);
      jj_consume_token(ENDSTMT);
      stateName = jj_consume_token(ID);
    ((StateNode) jjtn000).name = stateName.image;
      jj_consume_token(ENDSTMT);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void StartState() throws ParseException {
 /*@bgen(jjtree) State */
  SimpleNode jjtn000 = (SimpleNode)NodeFactory.jjtCreate(JJTSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token startStatename;
    try {
      jj_consume_token(START);
      jj_consume_token(29);
      startStatename = jj_consume_token(ID);
    ((StateNode) jjtn000).name = startStatename.image;
      jj_consume_token(ENDSTMT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    ((StateNode) jjtn000).isStartState = true;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TransitionNode() throws ParseException {
 /*@bgen(jjtree) Transition */
  SimpleNode jjtn000 = (SimpleNode)NodeFactory.jjtCreate(JJTTRANSITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token src;
  Token dst;
  Token transition;
    try {
      src = jj_consume_token(ID);
    ((TransitionNode) jjtn000).src = src.image;
      jj_consume_token(29);
      dst = jj_consume_token(ID);
    ((TransitionNode) jjtn000).dst = dst.image;
      jj_consume_token(OPEN);
      jj_consume_token(LABEL);
      jj_consume_token(27);
      jj_consume_token(30);
      label_3:
      while (true) {
        if (jj_2_7(1000)) {
          ;
        } else {
          break label_3;
        }
        transition = jj_consume_token(ID);
      ((TransitionNode) jjtn000).addTransition(transition.image);
        jj_consume_token(28);
      }
      transition = jj_consume_token(ID);
    ((TransitionNode) jjtn000).addTransition(transition.image);
      jj_consume_token(30);
      jj_consume_token(CLOSE);
      jj_consume_token(ENDSTMT);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(RANKDIR)) return true;
    if (jj_scan_token(27)) return true;
    if (jj_scan_token(LR)) return true;
    if (jj_scan_token(ENDSTMT)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(28)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(DOUBLECIRCLE)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(NODE)) return true;
    if (jj_scan_token(OPEN)) return true;
    if (jj_scan_token(SHAPE)) return true;
    if (jj_scan_token(27)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    if (jj_scan_token(28)) return true;
    if (jj_scan_token(COLOR)) return true;
    if (jj_scan_token(27)) return true;
    if (jj_scan_token(BLACK)) return true;
    if (jj_scan_token(28)) return true;
    if (jj_scan_token(FONTCOLOR)) return true;
    if (jj_scan_token(27)) return true;
    if (jj_scan_token(BLACK)) return true;
    if (jj_scan_token(CLOSE)) return true;
    if (jj_scan_token(ENDSTMT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ENDSTMT)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(29)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(OPEN)) return true;
    if (jj_scan_token(LABEL)) return true;
    if (jj_scan_token(27)) return true;
    if (jj_scan_token(30)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(30)) return true;
    if (jj_scan_token(CLOSE)) return true;
    if (jj_scan_token(ENDSTMT)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(CIRCLE)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FileParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[7];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public FileParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FileParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FileParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public FileParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FileParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public FileParser(FileParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FileParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
