options{
  LOOKAHEAD= 1;
  NODE_FACTORY = "StmtNodeFactory";}PARSER_BEGIN(StmtParser)package stmtparser;import faops.FA;import fileparser.FileParser;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.PrintStream;import java.io.InputStream;import java.util.HashMap;import java.util.Map;import gui.FADrawer;import regexparser.RegexParser;import java.util.Scanner;import java.util.NoSuchElementException;
public class StmtParser{  private static Map<String, FA> vars = new HashMap< String, FA>();  private static int drawNumber = 0;  private InputStream in;  public StmtParser(String file) {		try { 		if(file != null){			this.in = new FileInputStream(file);		}else{			this.in = System.in;		}	}catch(FileNotFoundException e) {		this.in = System.in;	}  }  public StmtParser() {	this.in = System.in;  }  public void run(){	new StmtParser(in);    new FileParser(in);    new RegexParser(in);    while (true)    {      try      {        System.out.println("Reading from standard input...");        SimpleNode n = StmtParser.Root();        System.out.println("Expressions:");        n.dump("");        System.out.println("\n");		eval(n);        StmtParser.ReInit(in);      }      catch (Throwable e)      {        System.out.println("[ERROR] - " + e.getMessage());        StmtParser.ReInit(in);        try {			System.in.skip(1000);		} catch (IOException e1) {			e1.printStackTrace();		}      }    }  }    public static void main(String args [])  {	StmtParser parser;	if(args.length > 0)		parser = new StmtParser(args[0]);	else		parser = new StmtParser();	parser.run();      }  public static FileInputStream getFile(String filename)  throws FileNotFoundException  {	return new FileInputStream(new File("files/" + filename));  }  public static PrintStream outFile(String filename) throws FileNotFoundException  {	return new PrintStream(new FileOutputStream("files/" + filename, false));  }  public static FA eval(SimpleNode node) throws Exception  {    FA out = null;    switch(node.id){		case StmtParserTreeConstants.JJTASSIGN:			AssignNode an = (AssignNode) node;			if (an.isDecl()) {				if(vars.get(an.varName) != null)					throw new EvalException("Variable " + an.varName + " was redeclared");			}			out = eval((SimpleNode)node.jjtGetChild(0));			vars.put(an.varName, out);			break;		case StmtParserTreeConstants.JJTOP:			OpNode on = (OpNode) node;			if(on.isBinary()){			  	SimpleNode lhs = (SimpleNode) node.jjtGetChild(0);				SimpleNode rhs = (SimpleNode) node.jjtGetChild(1);				if(on.op == Operations.Op.DUMP){					out = eval(lhs);					try { 						out.toDot(outFile(((StringNode)rhs).getString()));					} catch (FileNotFoundException e) {						throw new EvalException("Could not write to file " + ((StringNode)rhs).getString() + ": " + e.getMessage());					}				} else if(on.op == Operations.Op.TEST){					out = eval(lhs);                    String f = ((StringNode)rhs).getString();                     InputStream is = null;                     if(f.equals("stdin"))                          is = System.in;                     else is = getFile(f);                     System.out.println("Testing ($ to end)");                     Scanner scanner = new Scanner(is);                     String s;                     try{	                     while((s = scanner.nextLine()) != null && !s.equals("$")){	                          System.out.println(out.process(s.split(""))? "yes": "no");	                     }                     } catch(NoSuchElementException e){                    	                      }                     System.out.println("Finished Testing");				}				else if(on.op == Operations.Op.UNI){					FA fa = eval(lhs);					FA fb = eval(rhs);					out = faops.FA.union(fa,fb);				} else if(on.op == Operations.Op.CAT){					FA fa = eval(lhs);					FA fb = eval(rhs);					out = faops.FA.cat(fa,fb);				} else if(on.op == Operations.Op.INT){				  	FA fa = eval(lhs);					FA fb = eval(rhs);					out = faops.FA.intersect(fa,fb);				} else if(on.op == Operations.Op.XOR){				    FA fa = eval(lhs);					FA fb = eval(rhs);					out = faops.FA.xor(fa,fb);				} 			}			else {			  SimpleNode arg = (SimpleNode) node.jjtGetChild(0);			  if(on.op == Operations.Op.NEW){			     try {						FileParser.ReInit(getFile(((StringNode)arg).getString()));						try {							out = FileParser.toFa(FileParser.Start());						} catch (fileparser.ParseException e) {							throw new EvalException("Could not parse file " + ((StringNode)arg).getString() + " " + e.getMessage());						}					} catch (FileNotFoundException e) {						throw new EvalException("Could not open file " + ((StringNode)arg).getString());					}			  } else if(on.op == Operations.Op.FROMREGEX){			    try {                	out = RegexParser.parseString(((StringNode)arg).getString());                } catch(Exception e) {                	throw new EvalException("Error in Regex " + ((StringNode)arg).getString());                }			  } else if(on.op == Operations.Op.PRINT){			    out = eval(arg);			    System.out.println(out);			  } else if(on.op == Operations.Op.DRAW){			    out = eval(arg);			    new FADrawer(out, ++drawNumber);			  } else if(on.op == Operations.Op.STAR){			    out = faops.FA.star(eval(arg));			  } else if(on.op == Operations.Op.REV){			    out = eval(arg).reverse();			  } else if(on.op == Operations.Op.NOT){			    out = eval(arg).not();			  } else if(on.op == Operations.Op.TODFA){			    out = eval(arg).toDFA();			  } else if(on.op == Operations.Op.MIN){			    out = eval(arg).minimized();			  } 			}			break;		case StmtParserTreeConstants.JJTSTRING:			StringNode sn = (StringNode) node;			break;		case StmtParserTreeConstants.JJTSYMBOL:			SymNode syn = (SymNode) node;			out = vars.get(syn.varName);			if(out == null)				throw new EvalException("Variable " + syn.varName + " does not exist");			break;		default:			for(int i = 0; i < node.jjtGetNumChildren(); i++){			  try      		  {			  eval((SimpleNode)node.jjtGetChild(i));			  }			  catch (Throwable e)		      {		        System.out.println("[ERROR] - " + e.getMessage());		      }			}    }	return out;  }}PARSER_END(StmtParser)SKIP :{  " "| "\t"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* IDENTIFIERS */{
    < OPEN : "(">
  | < CLOSE : ")">
  | < NEW : "new">  | < FROMREGEX : "fromRegex">
  | < DOT : ".">  | < EQUALS : "=">
  | < REV : "rev">
  | < NOT : "not">
  | < STAR : "star">
  | < INT : "int">
  | < UN : "+">  | < DIF : "-">
  | < XOR : "xor">
  | < FA : "FA">
  | < TODFA : "dfa">
  | < MIN : "min">
  | < DUMP : "dump">
  | < PRINT : "print">  | < DRAW : "draw">  | < TEST : "test">
  | < STRINGDELIM : "\"">
  | < SYM : (["A"-"Z","a"-"z"])(["0"-"9","A"-"Z","a"-"z"])* >  | < STRING: "\"" (~["\"","\n","\r",";","="])* "\""  >
  | < END_STMT : ";">
  | < ENDL : "\n">}SimpleNode Root() :{}{  (Stmt())+ < ENDL >  { return jjtThis;}}boolean Stmt() #void: {String decl = null;}{ try {  (([decl = Decl()] Expression0() {((AssignNode)jjtThis).varName = decl; ((AssignNode)jjtThis).decl = true;}) #Assign(decl != null)) < END_STMT > } catch(ParseException e) { 	error_skipto(END_STMT); 	return false; } {   return true; }}void Expression0() #void: {String assign = null;}{  LOOKAHEAD(2)	//( assign = Assign()  Expression() {((AssignNode)jjtThis).varName = assign;}) #Assign(assign != null) )	Assign2()	| Expression()}void Expression() #void: {String op;}{  (Expression2() [ (op = BinaryOpTier1()) Expression() { ((OpNode)jjtThis).setOp(op); } #Op(2)])}void Expression2() #void: {String op;}{  Expression3()  [  		(  		  < DOT >  				(  				  (  				    op = Func()  				    {((OpNode)jjtThis).setOp(op);} #Op(2)  				  )   				 | Expression2() { ((OpNode)jjtThis).setOp("."); } #Op(2)  				)  		)  		| (  		  	(op = BinaryOpTier2())  		  	Expression2() { ((OpNode)jjtThis).setOp(op); }  		  	#Op(2)  		  )  ]}void Expression3() #void: {}{  (UnaryOp() | Symbol() |(< OPEN > Expression() < CLOSE >)|New())}String Func() #void : {Token op;}{	 ( op = < DUMP > | op = < TEST > ) < OPEN > String()  < CLOSE >	{ return op.image; } }void String() #String : {Token t;}{	( t = < STRING > ) {	  ((StringNode)jjtThis).setString(t.image);	}	}String Decl() #void: {Token t;}{  < FA > t = < SYM > "="  {    return t.image;  }}String Assign() #void:{Token t;}{  t = < SYM > "="  {    return t.image;  }}void Assign2() #Assign:{Token t;}{  t = < SYM > {((AssignNode)jjtThis).varName = t.image;} "=" Expression()  }void Symbol() #Symbol: {Token t;}{  t = < SYM >  {	((SymNode)jjtThis).varName = t.image;  }}void UnaryOp() #Op: {Token t;}{  (t = < REV > | t = < NOT > | t = < STAR > | t = < MIN > | t = < TODFA > | t = < PRINT > | t = < DRAW >)  { ((OpNode)jjtThis).setOp(t.image); }  < OPEN >  Expression0()  < CLOSE >}void New() #Op: {Token t;}{  (t = < NEW > | t = < FROMREGEX >)  { ((OpNode)jjtThis).setOp(t.image); }  < OPEN >  String()  < CLOSE >}String BinaryOpTier1() #void: {Token t;}{  ( t = < UN > )  {    return t.image;  }   }String BinaryOpTier2() #void: {Token t;}{  ( t = < INT >  | t = < XOR >)  {    return t.image;  }   }JAVACODEvoid error_skipto(int kind) {  ParseException e = generateParseException();  // generate the exception object.  System.out.println(e.toString());  // print the error message  Token t;  do {    t = getNextToken();  } while (t.kind != kind);    // The above loop consumes tokens all the way up to a token of    // "kind".  We use a do-while loop rather than a while because the    // current token is the one immediately before the erroneous token    // (in our case the token immediately before what should have been    // "if"/"while".}




