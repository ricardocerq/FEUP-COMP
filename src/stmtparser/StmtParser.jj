/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. StmtParser.jj */
/*@egen*/options{
  LOOKAHEAD= 1;
                                   }PARSER_BEGIN(StmtParser)package stmtparser;import faops.FA;import fileparser.FileParser;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.PrintStream;import java.util.HashMap;import java.util.Map;import gui.FADrawer;import regexparser.RegexParser;
public class StmtParser/*@bgen(jjtree)*/implements StmtParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTStmtParserState jjtree = new JJTStmtParserState();

/*@egen*/  private static Map<String, FA> vars = new HashMap< String, FA>();  private static int drawNumber = 0;  public static void main(String args [])  {    new StmtParser(System.in);    new FileParser(System.in);    new RegexParser(System.in);    while (true)    {      try      {
        System.out.println("Reading from standard input...");        SimpleNode n = StmtParser.Root();
        System.out.println("Expressions:");        n.dump("");        System.out.println("\n");		eval(n);        StmtParser.ReInit(System.in);      }      catch (Throwable e)      {        System.out.println("[ERROR] - " + e.getMessage());        StmtParser.ReInit(System.in);        try {			System.in.skip(1000);		} catch (IOException e1) {			e1.printStackTrace();		}      }    }  }  public static FA eval(SimpleNode node) throws Exception  {    FA out = null;    switch(node.id){		case StmtParserTreeConstants.JJTASSIGN:			AssignNode an = (AssignNode) node;			if (an.isDecl()) {				if(vars.get(an.varName) != null)					throw new EvalException("Variable " + an.varName + " was redeclared");			}			out = eval((SimpleNode)node.jjtGetChild(0));			vars.put(an.varName, out);			break;		case StmtParserTreeConstants.JJTOP:			OpNode on = (OpNode) node;			if(on.isBinary()){			  	SimpleNode lhs = (SimpleNode) node.jjtGetChild(0);				SimpleNode rhs = (SimpleNode) node.jjtGetChild(1);				if(on.op == Operations.Op.DUMP){					out = eval(lhs);					try {						out.toDot(new PrintStream(new FileOutputStream("src/fileparser/" + ((StringNode)rhs).getString(), false)));					} catch (FileNotFoundException e) {						throw new EvalException("Could not write to file " + ((StringNode)rhs).getString());					}				}				else if(on.op == Operations.Op.UNI){					FA fa = eval(lhs);					FA fb = eval(rhs);					out = faops.FA.union(fa,fb);				} else if(on.op == Operations.Op.CAT){					FA fa = eval(lhs);					FA fb = eval(rhs);					out = faops.FA.cat(fa,fb);				} else if(on.op == Operations.Op.INT){				  	FA fa = eval(lhs);					FA fb = eval(rhs);					out = faops.FA.intersect(fa,fb);				} else if(on.op == Operations.Op.XOR){				    FA fa = eval(lhs);					FA fb = eval(rhs);					out = faops.FA.xor(fa,fb);				} 			}			else {			  SimpleNode arg = (SimpleNode) node.jjtGetChild(0);			  if(on.op == Operations.Op.NEW){			     try {						FileParser.ReInit(new FileInputStream(new File(FileParser.class.getResource(((StringNode)arg).getString()).getPath())));						try {							out = FileParser.toFa(FileParser.Start());						} catch (fileparser.ParseException e) {							throw new EvalException("Could not parse file " + ((StringNode)arg).getString() + " " + e.getMessage());						}					} catch (FileNotFoundException e) {						throw new EvalException("Could not open file " + ((StringNode)arg).getString());					}			  } else if(on.op == Operations.Op.FROMREGEX){			    try {                	out = RegexParser.parseString(((StringNode)arg).getString());                } catch(Exception e) {                	throw new EvalException("Error in Regex " + ((StringNode)arg).getString());                }			  } else if(on.op == Operations.Op.PRINT){			    out = eval(arg);			    System.out.println(out);			  } else if(on.op == Operations.Op.DRAW){			    out = eval(arg);			    new FADrawer(out, ++drawNumber);			  } else if(on.op == Operations.Op.STAR){			    out = faops.FA.star(eval(arg));			  } else if(on.op == Operations.Op.REV){			    out = eval(arg).reverse();			  } else if(on.op == Operations.Op.NOT){			    out = eval(arg).not();			  } else if(on.op == Operations.Op.TODFA){			    out = eval(arg).toDFA();			  } else if(on.op == Operations.Op.MIN){			    out = eval(arg).minimized();			  } 			}			break;		case StmtParserTreeConstants.JJTSTRING:			StringNode sn = (StringNode) node;			break;		case StmtParserTreeConstants.JJTSYMBOL:			SymNode syn = (SymNode) node;			out = vars.get(syn.varName);			if(out == null)				throw new EvalException("Variable " + syn.varName + " does not exist");			break;		default:			for(int i = 0; i < node.jjtGetNumChildren(); i++){			  eval((SimpleNode)node.jjtGetChild(i));			}    }	return out;  }}PARSER_END(StmtParser)SKIP :{  " "| "\t"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* IDENTIFIERS */{
    < OPEN : "(">
  | < CLOSE : ")">
  | < NEW : "new">  | < FROMREGEX : "fromRegex">
  | < MUL : "x">
  | < DOT : ".">  | < EQUALS : "=">
  | < REV : "rev">
  | < NOT : "not">
  | < STAR : "star">
  | < INT : "int">
  | < UN : "+">  | < DIF : "-">
  | < XOR : "xor">
  | < FA : "FA">
  | < TODFA : "dfa">
  | < MIN : "min">
  | < DUMP : "dump">
  | < PRINT : "print">  | < DRAW : "draw">
  | < STRINGDELIM : "\"">
  | < SYM : (["A"-"Z","a"-"z"])(["0"-"9","A"-"Z","a"-"z"])* >  | < STRING: "\"" (~["\"","\n","\r",";","="])* "\""  >
  | < END_STMT : ";">
  | < ENDL : "\n">}SimpleNode Root() :{/*@bgen(jjtree) Root */
  SimpleNode jjtn000 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Root */
  try {
/*@egen*/  (Stmt() (< END_STMT >)+)+ < ENDL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  { return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Stmt()      : {String decl = null;}{/*@bgen(jjtree) #Assign( decl != null) */
  {
    SimpleNode jjtn001 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTASSIGN);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  ([decl = Decl()] Expression0()/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn001,  decl != null);
                                   jjtc001 = false;
                                 }
/*@egen*/ {((AssignNode)jjtn001).varName = decl; ((AssignNode)jjtn001).decl = true;})/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  decl != null);
    }
  }
/*@egen*/                       }void Expression0()      : {String assign = null;}{  LOOKAHEAD(2)	//( assign = Assign()  Expression() {((AssignNode)jjtThis).varName = assign;}) #Assign(assign != null) )	Assign2()	| Expression()}void Expression()      : {String op;}{  (Expression2() [ (op = BinaryOpTier1()) Expression()/*@bgen(jjtree) #Op( 2) */
                                                       {
                                                         SimpleNode jjtn001 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTOP);
                                                         boolean jjtc001 = true;
                                                         jjtree.openNodeScope(jjtn001);
                                                       }
                                                       try {
/*@egen*//*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn001,  2);
                                                         jjtc001 = false;
                                                       }
/*@egen*/ { ((OpNode)jjtn001).setOp(op); }/*@bgen(jjtree)*/
                                                       } finally {
                                                         if (jjtc001) {
                                                           jjtree.closeNodeScope(jjtn001,  2);
                                                         }
                                                       }
/*@egen*/       ])}void Expression2()      : {String op;}{  Expression3()  [  		(  		  < DOT >  				(  				  (  				    op = Func()/*@bgen(jjtree) #Op( 2) */
                                    {
                                      SimpleNode jjtn001 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTOP);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtc001 = false;
                                    }
/*@egen*/  				    {((OpNode)jjtn001).setOp(op);}/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                      }
                                    }
/*@egen*/         				  )   				 | Expression2()/*@bgen(jjtree) #Op( 2) */
                                                 {
                                                   SimpleNode jjtn002 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTOP);
                                                   boolean jjtc002 = true;
                                                   jjtree.openNodeScope(jjtn002);
                                                 }
                                                 try {
/*@egen*//*@bgen(jjtree)*/
                                                 {
                                                   jjtree.closeNodeScope(jjtn002,  2);
                                                   jjtc002 = false;
                                                 }
/*@egen*/ { ((OpNode)jjtn002).setOp("."); }/*@bgen(jjtree)*/
                                                 } finally {
                                                   if (jjtc002) {
                                                     jjtree.closeNodeScope(jjtn002,  2);
                                                   }
                                                 }
/*@egen*/         				)  		)  		| (  		  	(op = BinaryOpTier2())  		  	Expression2()/*@bgen(jjtree) #Op( 2) */
                                      {
                                        SimpleNode jjtn003 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTOP);
                                        boolean jjtc003 = true;
                                        jjtree.openNodeScope(jjtn003);
                                      }
                                      try {
/*@egen*//*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn003,  2);
                                        jjtc003 = false;
                                      }
/*@egen*/ { ((OpNode)jjtn003).setOp(op); }/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc003) {
                                          jjtree.closeNodeScope(jjtn003,  2);
                                        }
                                      }
/*@egen*/  		  	        		  )  ]}void Expression3()      : {}{  (UnaryOp() | Symbol() |(< OPEN > Expression() < CLOSE >)|New())}String Func()       : {Token op;}{	< DOT > op = < DUMP > < OPEN > String() < CLOSE >	{ return op.image; } }void String()         : {/*@bgen(jjtree) String */
                         SimpleNode jjtn000 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTSTRING);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) String */
        try {
/*@egen*/	( t = < STRING > )/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {	  ((StringNode)jjtn000).setString(t.image);	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	}String Decl()      : {Token t;}{  < FA > t = < SYM > "="  {    return t.image;  }}String Assign()      :{Token t;}{  t = < SYM > "="  {    return t.image;  }}void Assign2()        :{/*@bgen(jjtree) Assign */
                        SimpleNode jjtn000 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTASSIGN);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Assign */
  try {
/*@egen*/  t = < SYM > {((AssignNode)jjtn000).varName = t.image;} "=" Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  }void Symbol()        : {/*@bgen(jjtree) Symbol */
                        SimpleNode jjtn000 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTSYMBOL);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Symbol */
  try {
/*@egen*/  t = < SYM >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {	((SymNode)jjtn000).varName = t.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void UnaryOp()    : {/*@bgen(jjtree) Op */
                     SimpleNode jjtn000 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTOP);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Op */
  try {
/*@egen*/  (t = < REV > | t = < NOT > | t = < STAR > | t = < MIN > | t = < TODFA > | t = < PRINT > | t = < DRAW >)  { ((OpNode)jjtn000).setOp(t.image); }  < OPEN >  Expression0()  < CLOSE >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void New()    : {/*@bgen(jjtree) Op */
                 SimpleNode jjtn000 = (SimpleNode)StmtNodeFactory.jjtCreate(JJTOP);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Op */
  try {
/*@egen*/  (t = < NEW > | t = < FROMREGEX >)  { ((OpNode)jjtn000).setOp(t.image); }  < OPEN >  String()  < CLOSE >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String BinaryOpTier1()      : {Token t;}{  ( t = < UN > )  {    return t.image;  }   }String BinaryOpTier2()      : {Token t;}{  ( t = < MUL >  | t = < INT >  | t = < XOR >)  {    return t.image;  }   }




